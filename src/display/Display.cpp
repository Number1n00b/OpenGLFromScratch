#include <iostream>
#include <GL/glew.h>
#include <windows.h>
#include <SDL_syswm.h>

#include "Display.h"
#include "../main.h"

Display::Display(int width, int height, const std::string& title) {
	std::cout << "Constructing Display..." << std::endl;

	//Initialise SDL.
	std::cout << "Initialising SDL..." << std::endl;
	if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        Game::FailAndExit("SDL failed to initialize.");
	}

	m_width = width;
	m_height = height;

    //Number of bits stored for each colour. (2^n). Use 8(256) for standard.
    int colour_size = 8;

	SDL_GL_SetAttribute(SDL_GL_RED_SIZE, colour_size);
	SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, colour_size);
	SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, colour_size);
	SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, colour_size);

	//Number of bits allocated per pixel. In this case we want 4*colour_zie, enough for all 4 declared above.
	SDL_GL_SetAttribute(SDL_GL_BUFFER_SIZE, colour_size * 4);

	//Sets a depth buffer so that there is no erronius pixel overlapping.
	SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 16);

	//Enable double buffering.
	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);

	m_window = SDL_CreateWindow(title.c_str(), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, width, height, SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);

    SDL_SetWindowMinimumSize(m_window, 800, 600);
    SDL_SetWindowMaximumSize(m_window, 2560, 1600);

	//Create the GL context.
	m_GLContext = SDL_GL_CreateContext(m_window);

	//Initialise GLEW.
	std::cout << "Initialising GLEW..." << std::endl;
	GLenum status = glewInit();
	if (status != GLEW_OK) {
		std::cout << "GLEW Error: " << glewGetErrorString(status) << std::endl;
        Game::FailAndExit("Glew failed to initialize.");
	}

	//Enalble the depth buffer.
	glEnable(GL_DEPTH_TEST);

    //Enable culling faces for proper depth handling.
	glEnable(GL_CULL_FACE);
	glCullFace(GL_BACK);
}

void Display::UpdateViewport(int width, int height) {
    glViewport(0, 0, width, height);
}


void Display::Clear(float r, float g, float b, float a) {
	glClearColor(r, g, b, a);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
}


float Display::GetAspectRatio() {
	return (float)m_width / (float)m_height;
}

void Display::Update() {
    //Warp the mouse to the center of the window.
    //@Refactor later? Maybe into a more consistant place? Idk, currently this is done every frame.
    if (game_state == RUNNING) {
        //Ignore the mouse movement event generated by warping the mouse.
        SDL_WarpMouseInWindow(NULL, Window::window_width / 2, Window::window_height / 2);
        SDL_PumpEvents();
        SDL_FlushEvent(SDL_MOUSEMOTION);
    }
	SDL_GL_SwapWindow(m_window);
}

SDL_Window* Display::GetWindow() {
    return m_window;
}

Display::~Display() {
	std::cout << "Destructing Display..." << std::endl;

	SDL_GL_DeleteContext(m_GLContext);
	SDL_DestroyWindow(m_window);
}
